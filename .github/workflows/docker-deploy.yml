name: Docker Build and Deploy (Reusable )

on:
  workflow_call:
    inputs:
      site_slug:
        required: true
        type: string
      image_repo:
        required: true
        type: string
      remote_base:
        required: false
        type: string
        default: /opt/sites
    secrets:
      VPS_HOST:   { required: true }
      VPS_USER:   { required: true }
      VPS_SSH_KEY: { required: true }
      GHCR_USER:  { required: true }
      GHCR_PAT:   { required: true }

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check if rebuild needed
        id: check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E "(composer\.(json|lock)|docker/|Dockerfile)" > /dev/null; then
            echo "rebuild=true" >> $GITHUB_OUTPUT
          else
            echo "rebuild=false" >> $GITHUB_OUTPUT
          fi
      - name: Login to GHCR for push
        if: steps.check.outputs.rebuild == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push PHP-FPM image
        if: steps.check.outputs.rebuild == 'true'
        run: |
          TAG=$([ "${{ github.ref_name }}" = "main" ] && echo "prod" || echo "staging")
          docker build -f docker/Dockerfile.php -t ${{ inputs.image_repo }}:$TAG-php .
          docker push ${{ inputs.image_repo }}:$TAG-php
      - name: Build and push Nginx image
        if: steps.check.outputs.rebuild == 'true'
        run: |
          TAG=$([ "${{ github.ref_name }}" = "main" ] && echo "prod" || echo "staging")
          docker build -f docker/Dockerfile.nginx -t ${{ inputs.image_repo }}:$TAG-nginx .
          docker push ${{ inputs.image_repo }}:$TAG-nginx

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check if rebuild needed
        id: check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E "(composer\.(json|lock)|docker/|Dockerfile)" > /dev/null; then
            echo "rebuild=true" >> $GITHUB_OUTPUT
          else
            echo "rebuild=false" >> $GITHUB_OUTPUT
          fi
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: GHCR_USER,GHCR_PAT
          script: |
            set -e
            BRANCH="${{ github.ref_name }}"
            STACK=$([ "$BRANCH" = "main" ] && echo "prod" || echo "staging")
            SITE="${{ inputs.site_slug }}"
            BASE="${{ inputs.remote_base }}"

            if [ "${{ steps.check.outputs.rebuild }}" = "true" ]; then
              echo "Rebuilding containers..."
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
              cd "$BASE/$SITE/compose/$STACK"
              docker compose pull
              docker compose up -d
              docker image prune -f
            else
              echo "Code-only change, updating files..."
              cd "$BASE/$SITE"
              git pull origin $BRANCH
              # Restart PHP container to pick up code changes
              cd "compose/$STACK"
              docker compose restart php
            fi
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}
          GHCR_PAT:  ${{ secrets.GHCR_PAT }}